<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE sqlMap 
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" 
    "http://ibatis.apache.org/dtd/sql-map-2.dtd"> 
<sqlMap namespace="GeneralLocationDatumMetadata">

	<parameterMap class="GeneralLocationDatumMetadata" id="pmap-GeneralLocationDatumMetadata">
		<parameter property="created" jdbcType="TIMESTAMP" mode="IN"/>
		<parameter property="locationId" jdbcType="BIGINT" mode="IN"/>
		<parameter property="sourceId" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="metaJson" jdbcType="VARCHAR" mode="IN"/>
	</parameterMap>

	<procedure id="insert-GeneralLocationDatumMetadata" parameterMap="pmap-GeneralLocationDatumMetadata">
		{call solardatum.store_loc_meta(?, ?, ?, ?)}
	</procedure>
	
	<procedure id="update-GeneralLocationDatumMetadata" parameterMap="pmap-GeneralLocationDatumMetadata">
		{call solardatum.store_loc_meta(?, ?, ?, ?)}
	</procedure>
	
	<delete id="delete-GeneralLocationDatumMetadata" parameterClass="LocationSourcePK">
		DELETE FROM solardatum.da_loc_meta
		WHERE loc_id = #locationId# 
			AND source_id = #sourceId#
	</delete>
	
	<sql id="fragment-GeneralLocationDatumMetadata-full-result">
		meta.loc_id AS meta_loc_id,
		meta.source_id AS meta_source_id,
		meta.created AS meta_created,
		meta.updated AS meta_updated,
		meta.jdata AS meta_jdata
	</sql>
	
	<resultMap id="GeneralLocationDatumMetadataFullResult" class="GeneralLocationDatumMetadata">
		<result column="meta_loc_id" property="locationId"/>
		<result column="meta_source_id" property="sourceId"/>
		<result column="meta_created" property="created"/>
		<result column="meta_updated" property="updated"/>
		<result column="meta_jdata" property="metaJson"/>
		<result property="location" resultMap="SolarLocation.SolarLocationPublicResult"/>
	</resultMap>
	
	<select id="get-GeneralLocationDatumMetadata-for-id" resultMap="GeneralLocationDatumMetadataFullResult">
		SELECT
			<include refid="fragment-GeneralLocationDatumMetadata-full-result"/>,
			<include refid="fragment-SolarLocation-full-result"/>
		FROM
			solardatum.da_loc_meta meta
		LEFT OUTER JOIN solarnet.sn_loc l ON l.id = meta.loc_id
		WHERE
			meta.loc_id = #locationId#
			AND meta.source_id = #sourceId#
	</select>

	<!-- 
		FilterableDao support 
	-->

	<resultMap id="GeneralLocationDatumMetadataMatchResult" class="GeneralLocationDatumMetadataMatch" extends="GeneralLocationDatumMetadata.GeneralLocationDatumMetadataFullResult"/>

	<sql id="fragment-findall-GeneralLocationDatumMetadata-GeneralLocationDatumMetadataMatch-where">
		<isNotEmpty property="filter.tags">
			JOIN LATERAL json_array_elements(meta.jdata->'t') jtag ON true
		</isNotEmpty>
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="filter.locationIds">
				meta.loc_id IN
				<iterate open="(" close=")" conjunction="," property="filter.locationIds">#filter.locationIds[]#</iterate>					
			</isNotEmpty>
			<isNotEmpty prepend="AND" property="filter.sourceIds">
				meta.source_id IN
				<iterate open="(" close=")" conjunction="," property="filter.sourceIds">#filter.sourceIds[]#</iterate>					
			</isNotEmpty>
			<isNotNull prepend="AND" property="fts">
				l.address IS NULL
				AND l.latitude IS NULL
				AND l.longitude IS NULL
				AND l.elevation IS NULL
				AND l.fts_default @@ solarcommon.plainto_prefix_tsquery(#fts#)
			</isNotNull>
			<isNotEmpty prepend="AND" property="filter.tags">
				trim(jtag::text, '"') = ANY(#filter.tags,jdbcType=ARRAY#)
			</isNotEmpty>
		</dynamic>
	</sql>


	<select id="findall-GeneralLocationDatumMetadata-GeneralLocationDatumMetadataMatch" resultMap="GeneralLocationDatumMetadataMatchResult" fetchSize="50" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-GeneralLocationDatumMetadata-full-result"/>,
			<include refid="fragment-SolarLocation-full-result"/>
		FROM
			solardatum.da_loc_meta meta
		LEFT OUTER JOIN solarnet.sn_loc l ON l.id = meta.loc_id
		<include refid="fragment-findall-GeneralLocationDatumMetadata-GeneralLocationDatumMetadataMatch-where"/>
		ORDER BY
		<isNotEmpty property="SortDescriptors">
			<iterate property="SortDescriptors" conjunction=",">
				<isEqual property="SortDescriptors[].sortKey" compareValue="created">meta.created</isEqual>
				<isEqual property="SortDescriptors[].sortKey" compareValue="updated">meta.updated</isEqual>
				<isEqual property="SortDescriptors[].sortKey" compareValue="location">meta.loc_id</isEqual>
				<isEqual property="SortDescriptors[].sortKey" compareValue="source">meta.source_id</isEqual>
				<isEqual property="SortDescriptors[].descending" compareValue="true">DESC</isEqual>
			</iterate>
		</isNotEmpty>
		<isEmpty property="SortDescriptors">
			meta.source_id
		</isEmpty>
	</select>

	<select id="findall-GeneralLocationDatumMetadata-GeneralLocationDatumMetadataMatch-count" resultClass="long">
		SELECT count(meta.created)
		FROM
			solardatum.da_loc_meta meta
		<include refid="fragment-findall-GeneralLocationDatumMetadata-GeneralLocationDatumMetadataMatch-where"/>
	</select>

</sqlMap>
