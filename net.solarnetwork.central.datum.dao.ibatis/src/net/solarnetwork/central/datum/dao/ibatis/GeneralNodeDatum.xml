<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE sqlMap 
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" 
    "http://ibatis.apache.org/dtd/sql-map-2.dtd"> 
<sqlMap namespace="GeneralNodeDatum">

	<parameterMap class="GeneralNodeDatum" id="pmap-GeneralNodeDatum">
		<parameter property="created" jdbcType="TIMESTAMP" mode="IN"/>
		<parameter property="nodeId" jdbcType="BIGINT" mode="IN"/>
		<parameter property="sourceId" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="posted" jdbcType="TIMESTAMP" mode="IN"/>
		<parameter property="sampleJson" jdbcType="VARCHAR" mode="IN"/>
	</parameterMap>

	<procedure id="insert-GeneralNodeDatum" parameterMap="pmap-GeneralNodeDatum">
		{call solardatum.store_datum(?, ?, ?, ?, ?)}
	</procedure>
	
	<procedure id="update-GeneralNodeDatum" parameterMap="pmap-GeneralNodeDatum">
		{call solardatum.store_datum(?, ?, ?, ?, ?)}
	</procedure>
	
	<sql id="fragment-GeneralNodeDatum-full-result">
		datum.node_id AS datum_node_id,
		datum.ts AS datum_ts,
		datum.source_id AS datum_source_id,
		datum.posted AS datum_posted,
		datum.jdata AS datum_jdata
	</sql>
	
	<resultMap id="GeneralNodeDatumFullResult" class="GeneralNodeDatum">
		<result column="datum_node_id" property="nodeId"/>
		<result column="datum_ts" property="created"/>
		<result column="datum_source_id" property="sourceId"/>
		<result column="datum_posted" property="posted"/>
		<result column="datum_jdata" property="sampleJson"/>
	</resultMap>
	
	<select id="get-GeneralNodeDatum-for-id" resultMap="GeneralNodeDatumFullResult">
		SELECT
			<include refid="fragment-GeneralNodeDatum-full-result"/>
		FROM
			solardatum.da_datum datum
		WHERE
			datum.node_id = #nodeId#
			AND datum.ts = #created#
			AND datum.source_id = #sourceId#
	</select>

	<procedure id="find-general-distinct-sources" resultClass="java.lang.String">
		{call solardatum.find_available_sources(#node:BIGINT#, #start:TIMESTAMP#, #end:TIMESTAMP#)}
	</procedure>
	
	<parameterMap class="map" id="pmap-reportable-interval">
		<parameter property="node" jdbcType="BIGINT" mode="IN"/>
		<parameter property="source" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="ts_start" jdbcType="TIMESTAMP" mode="OUT"/>
		<parameter property="ts_end" jdbcType="TIMESTAMP" mode="OUT"/>
		<parameter property="node_tz" jdbcType="VARCHAR" mode="OUT"/>
		<parameter property="node_tz_offset" jdbcType="INTEGER" mode="OUT"/>
	</parameterMap>

	<procedure id="find-general-reportable-interval" parameterMap="pmap-reportable-interval" resultClass="map">
		{call solardatum.find_reportable_interval(?, ?, ?, ?, ?, ?)}
	</procedure>

	<!-- 
		FilterableDao support 
	-->

	<resultMap id="GeneralNodeDatumMatchResult" class="GeneralNodeDatumMatch" extends="GeneralNodeDatum.GeneralNodeDatumFullResult"/>

	<sql id="fragment-findall-GeneralNodeDatum-GeneralNodeDatumMatch">
		FROM
			solardatum.da_datum datum
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="filter.sourceIds">
				datum.source_id IN
				<iterate open="(" close=")" conjunction="," property="filter.sourceIds">#filter.sourceIds[]#</iterate>					
			</isNotEmpty>
			<isNotNull prepend="AND" property="filter.nodeIds">
				datum.node_id IN
				<iterate open="(" close=")" conjunction="," property="filter.nodeIds">#filter.nodeIds[]#</iterate>					
			</isNotNull>
			<isNotNull prepend="AND" property="filter.startDate">
				datum.ts &gt;= #filter.startDate#
			</isNotNull>
			<isNotNull prepend="AND" property="filter.endDate">
				datum.ts &lt; #filter.endDate#
			</isNotNull>
		</dynamic>
	</sql>

	<select id="findall-GeneralNodeDatum-GeneralNodeDatumMatch" resultMap="GeneralNodeDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-GeneralNodeDatum-full-result"/>
		<include refid="fragment-findall-GeneralNodeDatum-GeneralNodeDatumMatch"/>
		ORDER BY
		<isNotEmpty property="SortDescriptors">
			<iterate property="SortDescriptors" conjunction=",">
				<isEqual property="SortDescriptors[].sortKey" compareValue="created">datum.ts</isEqual>
				<isEqual property="SortDescriptors[].sortKey" compareValue="node">datum.node_id</isEqual>
				<isEqual property="SortDescriptors[].sortKey" compareValue="source">datum.source_id</isEqual>
				<isEqual property="SortDescriptors[].descending" compareValue="true">DESC</isEqual>
			</iterate>
		</isNotEmpty>
		<isEmpty property="SortDescriptors">
			datum.node_id,
			datum.ts,
			datum.source_id
		</isEmpty>
	</select>

	<select id="findall-GeneralNodeDatum-GeneralNodeDatumMatch-count" resultClass="long">
		SELECT count(datum.ts)
		<include refid="fragment-findall-GeneralNodeDatum-GeneralNodeDatumMatch"/>
	</select>

</sqlMap>
