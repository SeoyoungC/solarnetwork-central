<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE sqlMap 
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" 
    "http://ibatis.apache.org/dtd/sql-map-2.dtd"> 
<sqlMap namespace="DayDatum">

	<insert id="insert-DayDatum" parameterClass="DayDatum">
		<selectKey resultClass="long" keyProperty="id"> 
              SELECT nextval('solarnet.solarnet_seq') AS id 
		</selectKey>
		INSERT INTO solarnet.sn_day_datum 
			(id
			<isNotNull prepend="," property="created">created</isNotNull>
			, loc_id, day, sunrise, sunset)
		VALUES
			(#id#
			<isNotNull prepend="," property="created">#created#</isNotNull>
			, #locationId#, #day#, #sunrise#, #sunset#)
	</insert>

	<update id="update-DayDatum" parameterClass="DayDatum">
		UPDATE solarnet.sn_day_datum SET
			loc_id = #locationId#, 
			day = #day#,
			sunrise = #sunrise#,
			sunset = #sunset#,
		WHERE
			id = #id#
	</update>

	<sql id="fragment-DayDatum-full-result">
		ddatum.id AS sn_day_datum_id,
		ddatum.created AS sn_day_datum_created,
		ddatum.loc_id AS sn_day_datum_loc_id,
		ddatum.day AS sn_day_datum_day,
		ddatum.sunrise AS sn_day_datum_sunrise,
		ddatum.sunset AS sn_day_datum_sunset,
		ddatum.temperature_h AS sn_day_datum_temperature_h,
		ddatum.temperature_l AS sn_day_datum_temperature_l,
		ddatum.sky AS sn_day_datum_sky
	</sql>
	
	<resultMap id="DayDatumFullResult" class="DayDatum">
		<result column="sn_day_datum_id" property="id"/>
		<result column="sn_day_datum_created" property="created"/>
		<result column="sn_day_datum_loc_id" property="locationId"/>
		<result column="sn_day_datum_day" property="day"/>
		<result column="sn_day_datum_sunrise" property="sunrise"/>
		<result column="sn_day_datum_sunset" property="sunset"/>
		<result column="sn_day_datum_temperature_h" property="temperatureHighCelcius"/>
		<result column="sn_day_datum_temperature_l" property="temperatureLowCelcius"/>
		<result column="sn_day_datum_sky" property="skyConditions"/>
	</resultMap>
	
	<select id="get-DayDatum-for-id" resultMap="DayDatumFullResult" resultClass="DayDatum">
		SELECT
			<include refid="fragment-DayDatum-full-result"/>
		FROM
			solarnet.sn_day_datum ddatum
		WHERE
			id = #id#
	</select>
	
	<select id="find-DayDatum-for-date" resultMap="DayDatumFullResult" resultClass="DayDatum">
		SELECT
			<include refid="fragment-DayDatum-full-result"/>
		FROM
			solarnet.sn_day_datum ddatum
		INNER JOIN solarnet.sn_node n ON n.wloc_id = ddatum.loc_id
		WHERE
			n.node_id = #id#
			AND ddatum.day = #date#
	</select>
	
	<resultMap id="DayDatumReportingResult" class="ReportingDayDatum">
		<result column="day" property="day"/>
		<result column="loc_id" property="locationId"/>
		<result column="time_zone" property="timeZoneId"/>
		<result column="sunrise" property="sunrise"/>
		<result column="sunset" property="sunset"/>
		<result column="latitude" property="latitude"/>
		<result column="longitude" property="longitude"/>
		<result column="temperature_h" property="temperatureHighCelcius"/>
		<result column="temperature_l" property="temperatureLowCelcius"/>
		<result column="temperature_s" property="temperatureStartCelcius"/>
		<result column="temperature_e" property="temperatureEndCelcius"/>
		<result column="sky" property="skyConditions"/>
	</resultMap>
	
	<select id="find-DayDatum-for-agg-day" resultMap="DayDatumReportingResult">
		SELECT 
			dates.d as day,
			d.loc_id,
			l.time_zone,
			d.sunrise,
			d.sunset,
			l.latitude,
			l.longitude,
			d.temperature_h,
			d.temperature_l,
			d.sky,
			ws.temperature as temperature_s,
			we.temperature as temperature_e
			
		FROM ( 
			SELECT date(#start#) + series.d AS d 
			FROM generate_series(0, date(#end#) - date(#start#)) AS series(d)
		) AS dates
		
		LEFT OUTER JOIN solarnet.sn_day_datum d ON d.day = dates.d
		INNER JOIN solarnet.sn_node n ON n.wloc_id = d.loc_id
		INNER JOIN solarnet.sn_weather_loc wl ON wl.id = d.loc_id
		INNER JOIN solarnet.sn_loc l ON l.id = wl.loc_id
		LEFT OUTER JOIN (
				SELECT DISTINCT ON (day)
					date(w.info_date at time zone l.time_zone) as day,
					w.temperature
				FROM solarnet.sn_weather_datum w
				INNER JOIN solarnet.sn_node n ON n.wloc_id = w.loc_id
				INNER JOIN solarnet.sn_loc l ON l.id = n.loc_id
				WHERE 
					n.node_id = #node#
					AND w.info_date &gt;= #start# at time zone l.time_zone
					AND w.info_date &lt; (#end#::timestamp + interval '1 day') at time zone l.time_zone
				ORDER BY day, w.info_date
			) AS ws ON ws.day = dates.d
		LEFT OUTER JOIN (
				SELECT DISTINCT ON (day)
					date(w.info_date at time zone l.time_zone) as day,
					w.temperature
				FROM solarnet.sn_weather_datum w
				INNER JOIN solarnet.sn_node n ON n.wloc_id = w.loc_id
				INNER JOIN solarnet.sn_loc l ON l.id = n.loc_id
				WHERE 
					n.node_id = #node#
					AND w.info_date &gt;= #start# at time zone l.time_zone
					AND w.info_date &lt; (#end#::timestamp + interval '1 day') at time zone l.time_zone
				ORDER BY day, w.info_date DESC
			) AS we ON we.day = dates.d
		WHERE 
			n.node_id = #node#
			AND d.day >= #start# 
			AND d.day &lt; (#end#::date + interval '1 day')
		
		ORDER BY day
	</select>
	
	<resultMap id="DayDatumAggResult" class="DayDatum">
		<result column="day" property="day"/>
		<result column="temperature_h" property="temperatureHighCelcius"/>
		<result column="temperature_l" property="temperatureLowCelcius"/>
	</resultMap>
	
	<select id="find-DayDatum-for-agg-month" resultMap="DayDatumAggResult">
		SELECT 
			dates.d as day,
			d.temperature_h,
			d.temperature_l
			
		FROM ( 
			SELECT date_trunc('month', date(#start#)) + (series.d * interval '1 month') AS d 
			FROM generate_series(0, 
				(((extract('year' from #end#::timestamp) - extract('year' from #start#::timestamp)) * 12)
					+ (extract('month' from #end#::timestamp) - extract('month' from #start#::timestamp)))::integer
			) AS series(d)
		) AS dates
		
		LEFT OUTER JOIN (
			SELECT 
				date_trunc('month', d.day) as day,
				max(d.temperature_h) as temperature_h,
				min(d.temperature_l) as temperature_l
		
			FROM solarnet.sn_day_datum d
			INNER JOIN solarnet.sn_node n ON n.wloc_id = d.loc_id
			WHERE 
				n.node_id = #node#
				AND d.day &gt;= #start#::date
				AND d.day &lt; (#end#::date + interval '1 month')
				
			GROUP BY date_trunc('month', d.day)
			ORDER BY date_trunc('month', d.day)
			) AS d ON d.day = dates.d
		
		ORDER BY day
	</select>
	
</sqlMap>
