<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE sqlMap 
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" 
    "http://ibatis.apache.org/dtd/sql-map-2.dtd"> 
<sqlMap namespace="GeneralLocationDatum">

	<parameterMap class="GeneralLocationDatum" id="pmap-GeneralLocationDatum">
		<parameter property="created" jdbcType="TIMESTAMP" mode="IN"/>
		<parameter property="locationId" jdbcType="BIGINT" mode="IN"/>
		<parameter property="sourceId" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="posted" jdbcType="TIMESTAMP" mode="IN"/>
		<parameter property="sampleJson" jdbcType="VARCHAR" mode="IN"/>
	</parameterMap>

	<procedure id="insert-GeneralLocationDatum" parameterMap="pmap-GeneralLocationDatum">
		{call solardatum.store_loc_datum(?, ?, ?, ?, ?)}
	</procedure>
	
	<procedure id="update-GeneralLocationDatum" parameterMap="pmap-GeneralLocationDatum">
		{call solardatum.store_loc_datum(?, ?, ?, ?, ?)}
	</procedure>
	
	<sql id="fragment-GeneralLocationDatum-full-result">
		datum.loc_id AS datum_loc_id,
		datum.ts AS datum_ts,
		datum.source_id AS datum_source_id,
		datum.posted AS datum_posted,
		datum.jdata AS datum_jdata
	</sql>
	
	<resultMap id="GeneralLocationDatumFullResult" class="GeneralLocationDatum">
		<result column="datum_loc_id" property="locationId"/>
		<result column="datum_ts" property="created"/>
		<result column="datum_source_id" property="sourceId"/>
		<result column="datum_posted" property="posted"/>
		<result column="datum_jdata" property="sampleJson"/>
	</resultMap>
	
	<resultMap id="GeneralLocationDatumDirectResult" class="GeneralLocationDatum">
		<result column="loc_id" property="locationId"/>
		<result column="ts" property="created"/>
		<result column="source_id" property="sourceId"/>
		<result column="posted" property="posted"/>
		<result column="jdata" property="sampleJson"/>
	</resultMap>
	
	<select id="get-GeneralLocationDatum-for-id" resultMap="GeneralLocationDatumFullResult">
		SELECT
			<include refid="fragment-GeneralLocationDatum-full-result"/>
		FROM
			solardatum.da_loc_datum datum
		WHERE
			datum.loc_id = #locationId#
			AND datum.ts = #created#
			AND datum.source_id = #sourceId#
	</select>

	<procedure id="find-general-loc-distinct-sources" resultClass="java.lang.String">
		{call solardatum.find_loc_available_sources(#location:BIGINT#, #start:TIMESTAMP#, #end:TIMESTAMP#)}
	</procedure>
	
	<parameterMap class="map" id="pmap-reportable-interval">
		<parameter property="location" jdbcType="BIGINT" mode="IN"/>
		<parameter property="source" jdbcType="VARCHAR" mode="IN"/>
		<parameter property="ts_start" jdbcType="TIMESTAMP" mode="OUT"/>
		<parameter property="ts_end" jdbcType="TIMESTAMP" mode="OUT"/>
		<parameter property="location_tz" jdbcType="VARCHAR" mode="OUT"/>
		<parameter property="location_tz_offset" jdbcType="INTEGER" mode="OUT"/>
	</parameterMap>

	<procedure id="find-general-loc-reportable-interval" parameterMap="pmap-reportable-interval" resultClass="map">
		{call solardatum.find_loc_reportable_interval(?, ?, ?, ?, ?, ?)}
	</procedure>

	<!-- 
		FilterableDao support 
	-->

	<resultMap id="GeneralLocationDatumMatchResult" class="ReportingGeneralLocationDatum" extends="GeneralLocationDatum.GeneralLocationDatumFullResult">
		<result column="datum_local_date" property="localDateTime"/>
	</resultMap>
	<resultMap id="GeneralLocationDatumDirectMatchResult" class="GeneralLocationDatumMatch" extends="GeneralLocationDatum.GeneralLocationDatumDirectResult"/>

	<parameterMap class="map" id="pmap-most-recent">
		<parameter property="filter.locationId" jdbcType="BIGINT" mode="IN"/>
		<parameter property="filter.sourceIds" jdbcType="ARRAY" mode="IN"/>
	</parameterMap>

	<procedure id="find-general-loc-most-recent" parameterMap="pmap-most-recent" resultMap="GeneralLocationDatumDirectMatchResult">
		{call solardatum.find_loc_most_recent(?, ?)}
	</procedure>

	<sql id="fragment-findall-GeneralLocationDatum-GeneralLocationDatumMatch-where">
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="filter.sourceIds">
				datum.source_id IN
				<iterate open="(" close=")" conjunction="," property="filter.sourceIds">#filter.sourceIds[]#</iterate>					
			</isNotEmpty>
			<isNotNull prepend="AND" property="filter.locationIds">
				datum.loc_id IN
				<iterate open="(" close=")" conjunction="," property="filter.locationIds">#filter.locationIds[]#</iterate>					
			</isNotNull>
			<isNotNull prepend="AND" property="filter.startDate">
				datum.ts &gt;= #filter.startDate#
			</isNotNull>
			<isNotNull prepend="AND" property="filter.endDate">
				datum.ts &lt; #filter.endDate#
			</isNotNull>
		</dynamic>
	</sql>


	<select id="findall-GeneralLocationDatum-GeneralLocationDatumMatch" resultMap="GeneralLocationDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-GeneralLocationDatum-full-result"/>
			, datum.ts AT TIME ZONE COALESCE(loc.time_zone, 'UTC') AS datum_local_date
		FROM
			solardatum.da_loc_datum datum
		LEFT OUTER JOIN solarnet.sn_loc loc ON loc.id = datum.loc_id
		<include refid="fragment-findall-GeneralLocationDatum-GeneralLocationDatumMatch-where"/>
		ORDER BY
		<isNotEmpty property="SortDescriptors">
			<iterate property="SortDescriptors" conjunction=",">
				<isEqual property="SortDescriptors[].sortKey" compareValue="created">datum.ts</isEqual>
				<isEqual property="SortDescriptors[].sortKey" compareValue="location">datum.loc_id</isEqual>
				<isEqual property="SortDescriptors[].sortKey" compareValue="source">datum.source_id</isEqual>
				<isEqual property="SortDescriptors[].descending" compareValue="true">DESC</isEqual>
			</iterate>
		</isNotEmpty>
		<isEmpty property="SortDescriptors">
			datum.loc_id,
			datum.ts,
			datum.source_id
		</isEmpty>
	</select>

	<select id="findall-GeneralLocationDatum-GeneralLocationDatumMatch-count" resultClass="long">
		SELECT count(datum.ts)
		FROM
			solardatum.da_loc_datum datum
		<include refid="fragment-findall-GeneralLocationDatum-GeneralLocationDatumMatch-where"/>
	</select>

	<!-- Aggregated query support -->

	<resultMap id="ReportingGeneralLocationDatumMatchResult" class="ReportingGeneralLocationDatum">
		<result column="r_datum_loc_id" property="locationId"/>
		<result column="r_datum_ts_start" property="created"/>
		<result column="r_datum_local_date" property="localDateTime"/>
		<result column="r_datum_source_id" property="sourceId"/>
		<result column="r_datum_jdata" property="sampleJson"/>
	</resultMap>

	<sql id="fragment-GeneralLocationDatum-aggregation-result">
		datum.loc_id AS r_datum_loc_id,
		datum.ts_start AS r_datum_ts_start,
		datum.local_date AS r_datum_local_date,
		datum.source_id AS r_datum_source_id,
		datum.jdata AS r_datum_jdata
	</sql>

	<sql id="fragment-findall-ReportingGeneralLocationDatum-where">
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="filter.sourceIds">
				datum.source_id IN
				<iterate open="(" close=")" conjunction="," property="filter.sourceIds">#filter.sourceIds[]#</iterate>					
			</isNotEmpty>
			<isNotNull prepend="AND" property="filter.locationIds">
				datum.loc_id IN
				<iterate open="(" close=")" conjunction="," property="filter.locationIds">#filter.locationIds[]#</iterate>					
			</isNotNull>
			<isNotNull prepend="AND" property="filter.startDate">
				datum.ts_start &gt;= #filter.startDate#
			</isNotNull>
			<isNotNull prepend="AND" property="filter.endDate">
				datum.ts_start &lt; #filter.endDate#
			</isNotNull>
		</dynamic>
	</sql>
	
	<sql id="fragment-findall-ReportingGeneralLocationDatum-order">
		ORDER BY
		<isNotEmpty property="SortDescriptors">
			<iterate property="SortDescriptors" conjunction=",">
				<isEqual property="SortDescriptors[].sortKey" compareValue="created">r_datum_ts_start</isEqual>
				<isEqual property="SortDescriptors[].sortKey" compareValue="location">r_datum_loc_id</isEqual>
				<isEqual property="SortDescriptors[].sortKey" compareValue="source">r_datum_source_id</isEqual>
				<isEqual property="SortDescriptors[].descending" compareValue="true">DESC</isEqual>
			</iterate>
		</isNotEmpty>
		<isEmpty property="SortDescriptors">
			r_datum_ts_start, r_datum_loc_id, r_datum_source_id
		</isEmpty>
	</sql>

	<sql id="fragment-findall-ReportingGeneralLocationDatum-minuteagg-where">
		solaragg.find_agg_loc_datum_minute(
			#filter.locationId#,
			#filter.sourceIds,jdbcType=ARRAY#,
			#filter.startDate#::timestamptz,
			#filter.endDate#::timestamptz,
			#filter.aggregation.level#
		) AS datum
	</sql>

	<!-- Aggregated query: Minute -->

	<select id="findall-GeneralLocationDatum-ReportingGeneralLocationDatum-Minute" resultMap="ReportingGeneralLocationDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-GeneralLocationDatum-aggregation-result"/>
		FROM
		<include refid="fragment-findall-ReportingGeneralLocationDatum-minuteagg-where"/>
		<include refid="fragment-findall-ReportingGeneralLocationDatum-order"/>
	</select>

	<!-- Aggregated query: hour -->

	<select id="findall-GeneralLocationDatum-ReportingGeneralLocationDatum-Hour-count" resultClass="long">
		SELECT count(datum.ts_start)
		FROM
			solaragg.agg_loc_datum_hourly datum
		<include refid="fragment-findall-ReportingGeneralLocationDatum-where"/>
	</select>
	
	<select id="findall-GeneralLocationDatum-ReportingGeneralLocationDatum-Hour" resultMap="ReportingGeneralLocationDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-GeneralLocationDatum-aggregation-result"/>
		FROM
			solaragg.agg_loc_datum_hourly datum
		<include refid="fragment-findall-ReportingGeneralLocationDatum-where"/>
		<include refid="fragment-findall-ReportingGeneralLocationDatum-order"/>
	</select>

	<!-- Aggregated query: hour of day -->

	<select id="findall-GeneralLocationDatum-ReportingGeneralLocationDatum-HourOfDay" resultMap="ReportingGeneralLocationDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-GeneralLocationDatum-aggregation-result"/>
		FROM
			solaragg.find_agg_loc_datum_hod(
				#filter.locationId#,
				#filter.sourceIds,jdbcType=ARRAY#,
				#filter.dataPathElements,jdbcType=ARRAY#
				<isNotNull property="filter.startDate">
					<isNotNull prepend="," property="filter.endDate">
						#filter.startDate#::timestamptz,
						#filter.endDate#::timestamptz
					</isNotNull>
				</isNotNull>
			) AS datum
		<include refid="fragment-findall-ReportingGeneralLocationDatum-order"/>
	</select>

	<!-- Aggregated query: seasonal hour of day -->

	<select id="findall-GeneralLocationDatum-ReportingGeneralLocationDatum-SeasonalHourOfDay" resultMap="ReportingGeneralLocationDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-GeneralLocationDatum-aggregation-result"/>
		FROM
			solaragg.find_agg_loc_datum_seasonal_hod(
				#filter.locationId#,
				#filter.sourceIds,jdbcType=ARRAY#,
				#filter.dataPathElements,jdbcType=ARRAY#
				<isNotNull property="filter.startDate">
					<isNotNull prepend="," property="filter.endDate">
						#filter.startDate#::timestamptz,
						#filter.endDate#::timestamptz
					</isNotNull>
				</isNotNull>
			) AS datum
		<include refid="fragment-findall-ReportingGeneralLocationDatum-order"/>
	</select>

	<!-- Aggregated query: day -->

	<select id="findall-GeneralLocationDatum-ReportingGeneralLocationDatum-Day-count" resultClass="long">
		SELECT count(datum.ts_start)
		FROM
			solaragg.agg_loc_datum_daily datum
		<include refid="fragment-findall-ReportingGeneralLocationDatum-where"/>
	</select>
	
	<select id="findall-GeneralLocationDatum-ReportingGeneralLocationDatum-Day" resultMap="ReportingGeneralLocationDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-GeneralLocationDatum-aggregation-result"/>
		FROM
			solaragg.agg_loc_datum_daily datum
		<include refid="fragment-findall-ReportingGeneralLocationDatum-where"/>
		<include refid="fragment-findall-ReportingGeneralLocationDatum-order"/>
	</select>

	<!-- Aggregated query: day of week -->

	<select id="findall-GeneralLocationDatum-ReportingGeneralLocationDatum-DayOfWeek" resultMap="ReportingGeneralLocationDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-GeneralLocationDatum-aggregation-result"/>
		FROM
			solaragg.find_agg_loc_datum_dow(
				#filter.locationId#,
				#filter.sourceIds,jdbcType=ARRAY#,
				#filter.dataPathElements,jdbcType=ARRAY#
				<isNotNull property="filter.startDate">
					<isNotNull prepend="," property="filter.endDate">
						#filter.startDate#::timestamptz,
						#filter.endDate#::timestamptz
					</isNotNull>
				</isNotNull>
			) AS datum
		<include refid="fragment-findall-ReportingGeneralLocationDatum-order"/>
	</select>

	<!-- Aggregated query: seasonal day of week -->

	<select id="findall-GeneralLocationDatum-ReportingGeneralLocationDatum-SeasonalDayOfWeek" resultMap="ReportingGeneralLocationDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-GeneralLocationDatum-aggregation-result"/>
		FROM
			solaragg.find_agg_loc_datum_seasonal_dow(
				#filter.locationId#,
				#filter.sourceIds,jdbcType=ARRAY#,
				#filter.dataPathElements,jdbcType=ARRAY#
				<isNotNull property="filter.startDate">
					<isNotNull prepend="," property="filter.endDate">
						#filter.startDate#::timestamptz,
						#filter.endDate#::timestamptz
					</isNotNull>
				</isNotNull>
			) AS datum
		<include refid="fragment-findall-ReportingGeneralLocationDatum-order"/>
	</select>

	<!-- Aggregated query: month -->

	<select id="findall-GeneralLocationDatum-ReportingGeneralLocationDatum-Month-count" resultClass="long">
		SELECT count(datum.ts_start)
		FROM
			solaragg.agg_loc_datum_monthly datum
		<include refid="fragment-findall-ReportingGeneralLocationDatum-where"/>
	</select>
	
	<select id="findall-GeneralLocationDatum-ReportingGeneralLocationDatum-Month" resultMap="ReportingGeneralLocationDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-GeneralLocationDatum-aggregation-result"/>
		FROM
			solaragg.agg_loc_datum_monthly datum
		<include refid="fragment-findall-ReportingGeneralLocationDatum-where"/>
		<include refid="fragment-findall-ReportingGeneralLocationDatum-order"/>
	</select>

</sqlMap>
