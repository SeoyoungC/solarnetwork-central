<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE sqlMap 
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" 
    "http://ibatis.apache.org/dtd/sql-map-2.dtd"> 
<sqlMap namespace="PowerDatum">

	<insert id="insert-PowerDatum" parameterClass="PowerDatum">
		<selectKey resultClass="long" keyProperty="id"> 
              SELECT nextval('solarnet.power_seq') AS id 
		</selectKey>
		INSERT INTO solarnet.sn_power_datum 
			(id
			<isNotNull prepend="," property="created">created</isNotNull>
			<isNotNull prepend="," property="posted">posted</isNotNull>
			, node_id, 
			<isNotNull property="sourceId">
				source_id, 
			</isNotNull>
			price_loc_id, watts, bat_volts,
			bat_amp_hrs, watt_hour)
		VALUES
			(#id#
			<isNotNull prepend="," property="created">#created#</isNotNull>
			<isNotNull prepend="," property="posted">#posted#</isNotNull>
			, #nodeId#, 
			<isNotNull property="sourceId">
				#sourceId#, 
			</isNotNull>
			#locationId#, #watts#, #batteryVolts#,
			#batteryAmpHours#, #wattHourReading#)
	</insert>

	<update id="update-PowerDatum" parameterClass="PowerDatum">
		UPDATE solarnet.sn_power_datum SET
			node_id = #nodeId#, 
			<isNotNull property="sourceId">
				source_id = #sourceId#, 
			</isNotNull>
			price_loc_id = #locationId#,
			watts = #watts#,
			bat_volts = #batteryVolts#,
			bat_amp_hrs = #batteryAmpHours#,
			watt_hour = #wattHourReading#
		WHERE
			id = #id#
	</update>

	<sql id="fragment-PowerDatum-full-result">
		pdatum.id AS sn_power_datum_id,
		pdatum.created AS sn_power_datum_created,
		pdatum.posted AS sn_power_datum_posted,
		pdatum.node_id AS sn_power_datum_node_id,
		pdatum.source_id AS sn_power_datum_source_id,
		pdatum.price_loc_id AS sn_power_datum_price_loc_id,
		pdatum.watts AS sn_power_datum_watts,
		pdatum.bat_volts AS sn_power_datum_bat_volts,
		pdatum.bat_amp_hrs AS sn_power_datum_bat_amp_hrs,
		pdatum.watt_hour AS sn_power_datum_watt_hour
	</sql>
	
	<resultMap id="PowerDatumFullResult" class="PowerDatum">
		<result column="sn_power_datum_id" property="id"/>
		<result column="sn_power_datum_created" property="created"/>
		<result column="sn_power_datum_posted" property="posted"/>
		<result column="sn_power_datum_node_id" property="nodeId"/>
		<result column="sn_power_datum_source_id" property="sourceId"/>
		<result column="sn_power_datum_price_loc_id" property="locationId"/>
		<result column="sn_power_datum_watts" property="watts"/>
		<result column="sn_power_datum_bat_volts" property="batteryVolts"/>
		<result column="sn_power_datum_bat_amp_hrs" property="batteryAmpHours"/>
		<result column="sn_power_datum_watt_hour" property="wattHourReading"/>
	</resultMap>
	
	<select id="get-PowerDatum-for-id" resultMap="PowerDatumFullResult">
		SELECT
			<include refid="fragment-PowerDatum-full-result"/>
		FROM
			solarnet.sn_power_datum pdatum
		WHERE
			pdatum.id = #id#
	</select>
	
	<select id="find-PowerDatum-for-date" resultMap="PowerDatumFullResult">
		SELECT
			<include refid="fragment-PowerDatum-full-result"/>
		FROM
			solarnet.sn_power_datum pdatum
		WHERE
			pdatum.node_id = #id#
			AND pdatum.created = #date#
	</select>

	<select id="find-PowerDatum-most-recent" resultMap="PowerDatumFullResult">
		SELECT
			<include refid="fragment-PowerDatum-full-result"/>
		FROM
			solarnet.sn_power_datum_most_recent recent
		INNER JOIN
			solarnet.sn_power_datum pdatum ON pdatum.id = recent.datum_id
		WHERE
			recent.node_id = #node#
			<isNotNull property="source">
				AND recent.source_id = #source#
			</isNotNull>
		ORDER BY
			pdatum.source_id
	</select>
	
	<resultMap id="PowerDatumAggResult" class="ReportingPowerDatum">
		<result column="created_date" property="localDateTime"/>
		<result column="source" property="sourceId"/>
		<result column="watts" property="watts"/>
		<result column="bat_volts" property="batteryVolts"/>
	</resultMap>
	
	<select id="find-PowerDatum-for-agg-minute" resultMap="PowerDatumAggResult">
		SELECT 
			dates.d AS created_date,
			COALESCE(data.source, '') AS source,
			COALESCE(data.watts, -1) AS watts,
			COALESCE(data.bat_volts, -1) AS bat_volts
		FROM ( 
			SELECT #start#::timestamp + (series.d * interval '1 minute') AS d 
			FROM generate_series(0, floor(extract('epoch' from #end#::timestamp - #start#::timestamp))::integer / 60 - #precision#, #precision#) AS series(d)
		) AS dates
		
		LEFT OUTER JOIN (
			SELECT 
				to_timestamp(
					extract('epoch' from date_trunc('minute', p.created at time zone l.time_zone))
					- ((cast(extract('minute' from p.created) as integer) % #precision#) * 60)
				) as created_date,
				p.source_id as source,
				avg(p.watts) as watts,
				avg(p.bat_volts) as bat_volts
		
			FROM solarnet.sn_power_datum p
			INNER JOIN solarnet.sn_node n ON n.node_id = #node#
			INNER JOIN solarnet.sn_loc l ON l.id = n.loc_id
		
			WHERE 
				p.node_id = #node#
				<isPropertyAvailable property="source">
					AND p.source_id = #source#
				</isPropertyAvailable>
				<isPropertyAvailable property="sources">
					AND p.source_id IN
					<iterate open="(" close=")" conjunction="," property="sources">#sources[]#</iterate>					
				</isPropertyAvailable>
				AND p.created BETWEEN (#start#::timestamp at time zone l.time_zone) 
					AND (#end#::timestamp at time zone l.time_zone)
				
			GROUP BY created_date, p.source_id
		) AS data ON data.created_date = dates.d
		
		ORDER BY created_date
	</select>

	<sql id="fragment-ReportingPowerDatum-agg-result">
		dates.d AS created_date,
		COALESCE(data.source, '') AS source,
		COALESCE(data.watts, -1) AS watts,
		COALESCE(data.bat_volts, -1) AS bat_volts,
		COALESCE(data.wh, -1) AS wh,
		COALESCE(data.cost_amt, -1) AS cost_amt,
		COALESCE(data.cost_curr, '') AS cost_curr
	</sql>
	
	<resultMap id="ReportingPowerDatumAggResult" class="ReportingPowerDatum">
		<result column="created_date" property="localDateTime"/>
		<result column="source" property="sourceId"/>
		<result column="watts" property="watts"/>
		<result column="bat_volts" property="batteryVolts"/>
		<result column="wh" property="wattHours"/>
		<result column="cost_amt" property="cost"/>
		<result column="cost_curr" property="currency"/>
	</resultMap>
		
	<select id="find-PowerDatum-for-agg-hour" resultMap="ReportingPowerDatumAggResult">
		SELECT 
			<include refid="fragment-ReportingPowerDatum-agg-result"/>
			
		FROM generate_series(#start#::timestamp, #end#::timestamp, '1 hour') AS dates(d)
		
		LEFT OUTER JOIN (
			<isPropertyAvailable property="node">
				SELECT 
					c.created_hour as created_date,
					c.source_id as source,
					c.watts as watts,
					c.bat_volts as bat_volts,
					c.watt_hours as wh,
					c.cost_amt as cost_amt,
					c.cost_currency as cost_curr
			
				FROM solarrep.rep_power_datum_hourly c
			
				WHERE 
					c.node_id = #node#
					<isPropertyAvailable property="source">
						AND c.source_id = #source#
					</isPropertyAvailable>
					<isPropertyAvailable property="sources">
						AND c.source_id IN
						<iterate open="(" close=")" conjunction="," property="sources">#sources[]#</iterate>					
					</isPropertyAvailable>
					AND c.created_hour BETWEEN #start# AND #end#
					
			</isPropertyAvailable>
			<isNotPropertyAvailable property="node">
				SELECT 
					c.created_hour as created_date,
					CAST(NULL as integer) as watts,
					CAST(NULL as real) as bat_volts,
					sum(c.watt_hours) as wh,
					CAST(NULL as real) as cost_amt,
					CAST(NULL as varchar) as cost_curr
			
				FROM solarrep.rep_net_power_datum_hourly c
			
				WHERE 
					c.created_hour BETWEEN #start# AND #end#
					
				GROUP BY created_date
			</isNotPropertyAvailable>
		) AS data ON data.created_date = dates.d
		
		ORDER BY created_date
	</select>
	
	<select id="find-PowerDatum-for-agg-day" resultMap="ReportingPowerDatumAggResult">
		SELECT 
			<include refid="fragment-ReportingPowerDatum-agg-result"/>
			
		FROM ( 
			SELECT date(#start#) + series.d AS d 
			FROM generate_series(0, date(#end#) - date(#start#)) AS series(d)
		) AS dates
		
		LEFT OUTER JOIN (
			<isPropertyAvailable property="node">
				SELECT 
					c.created_day as created_date,
					c.source_id as source,
					c.watts,
					c.bat_volts,
					c.watt_hours as wh,
					c.cost_amt,
					c.cost_currency as cost_curr
			
				FROM solarrep.rep_power_datum_daily c
			
				WHERE 
					c.created_day BETWEEN #start#::date AND #end#::date
					AND c.node_id = #node#
					<isPropertyAvailable property="source">
						AND c.source_id = #source#
					</isPropertyAvailable>
					<isPropertyAvailable property="sources">
						AND c.source_id IN
						<iterate open="(" close=")" conjunction="," property="sources">#sources[]#</iterate>					
					</isPropertyAvailable>
			</isPropertyAvailable>
			<isNotPropertyAvailable property="node">
				SELECT 
					c.created_day as created_date,
					CAST(NULL as integer) as watts,
					CAST(NULL as real) as bat_volts,
					c.watt_hours as wh,
					CAST(NULL as real) as cost_amt,
					CAST(NULL as text) as cost_curr
			
				FROM solarrep.rep_net_power_datum_daily c
			
				WHERE 
					c.created_day BETWEEN #start#::date AND #end#::date
			</isNotPropertyAvailable>
		) AS data ON data.created_date = dates.d
		
		ORDER BY created_date
	</select>

	<select id="find-PowerDatum-for-agg-week" resultMap="ReportingPowerDatumAggResult">
		SELECT 
			<include refid="fragment-ReportingPowerDatum-agg-result"/>
			
		FROM ( 
			SELECT date_trunc('week', #start#::timestamp) + (series.d * interval '1 week') AS d 
			FROM generate_series(0, 
				CAST(extract('days' from date_trunc('week', #end#::timestamp) 
					- date_trunc('week', #start#::timestamp)) / 7 AS INTEGER)
			) AS series(d)
		) AS dates
		
		LEFT OUTER JOIN (
			<isPropertyAvailable property="node">
				SELECT 
					date_trunc('week', c.created_day) as created_date,
					c.source_id as source,
					avg(c.watts) as watts,
					avg(c.bat_volts) as bat_volts,
					sum(c.watt_hours) as wh,
					sum(c.cost_amt) as cost_amt,
					min(c.cost_currency) as cost_curr
			
				FROM solarrep.rep_power_datum_daily c
			
				WHERE 
					c.node_id = #node#
					<isPropertyAvailable property="source">
						AND c.source_id = #source#
					</isPropertyAvailable>
					<isPropertyAvailable property="sources">
						AND c.source_id IN
						<iterate open="(" close=")" conjunction="," property="sources">#sources[]#</iterate>					
					</isPropertyAvailable>
					AND c.created_day &gt;= date_trunc('week', #start#::timestamp)::date
					AND c.created_day &lt; (date_trunc('week', #end#::timestamp) + interval '1 week')::date
					
				GROUP BY created_date, c.source_id
			</isPropertyAvailable>
			<isNotPropertyAvailable property="node">
				SELECT 
					date_trunc('week', c.created_day) as created_date,
					CAST(NULL as real) as watts,
					CAST(NULL as real) as bat_volts,
					sum(c.watt_hours) as wh,
					CAST(NULL as real) as cost_amt,
					CAST(NULL as varchar) as cost_curr
			
				FROM solarrep.rep_net_power_datum_daily c
			
				WHERE 
					c.created_day &gt;= date_trunc('week', #start#::timestamp)::date
					AND c.created_day &lt; (date_trunc('week', #end#::timestamp) + interval '1 week')::date
					
				GROUP BY created_date
			</isNotPropertyAvailable>
		) AS data ON data.created_date = dates.d
		
		ORDER BY created_date
	</select>
	
	<select id="find-PowerDatum-for-agg-month" resultMap="ReportingPowerDatumAggResult">
		SELECT 
			<include refid="fragment-ReportingPowerDatum-agg-result"/>
			
		FROM ( 
			SELECT date_trunc('month', date(#start#)) + (series.d * interval '1 month') AS d 
			FROM generate_series(0, 
				(((extract('year' from #end#::timestamp) - extract('year' from #start#::timestamp)) * 12)
					+ (extract('month' from #end#::timestamp) - extract('month' from #start#::timestamp)))::integer
			) AS series(d)
		) AS dates
		
		LEFT OUTER JOIN (
			<isPropertyAvailable property="node">
				SELECT 
					date_trunc('month', c.created_day) as created_date,
					c.source_id as source,
					avg(c.watts) as watts,
					avg(c.bat_volts) as bat_volts,
					sum(c.watt_hours) as wh,
					sum(c.cost_amt) as cost_amt,
					min(c.cost_currency) as cost_curr
			
				FROM solarrep.rep_power_datum_daily c
			
				WHERE 
					c.node_id = #node#
					<isPropertyAvailable property="source">
						AND c.source_id = #source#
					</isPropertyAvailable>
					<isPropertyAvailable property="sources">
						AND c.source_id IN
						<iterate open="(" close=")" conjunction="," property="sources">#sources[]#</iterate>					
					</isPropertyAvailable>
					AND c.created_day &gt;= #start#::date
					AND c.created_day &lt; (#end#::date + interval '1 month')::date
					
				GROUP BY created_date, c.source_id
			</isPropertyAvailable>
			<isNotPropertyAvailable property="node">
				SELECT 
					date_trunc('month', c.created_day) as created_date,
					CAST(NULL as real) as watts,
					CAST(NULL as real) as bat_volts,
					sum(c.watt_hours) as wh,
					CAST(NULL as real) as cost_amt,
					CAST(NULL as varchar) as cost_curr
			
				FROM solarrep.rep_net_power_datum_daily c
			
				WHERE 
					c.created_day &gt;= #start#::date
					AND c.created_day &lt; (#end#::date + interval '1 month')::date
					
				GROUP BY created_date
			</isNotPropertyAvailable>
		) AS data ON data.created_date = dates.d
		
		ORDER BY created_date
	</select>

	<select id="find-PowerDatum-distinct-sources" resultClass="java.lang.String">
		SELECT DISTINCT source_id
		FROM solarrep.rep_power_datum_daily
		WHERE node_id = #node#
		<isPropertyAvailable property="start">
			AND created_day &gt;= #start#::date
		</isPropertyAvailable>
		<isPropertyAvailable property="end">
			AND created_day &lt;= #end#::date
		</isPropertyAvailable>
	</select>

	<!-- 
		FilterableDao support 
	-->

	<resultMap id="PowerDatumMatchResult" class="PowerDatumMatch" extends="PowerDatum.PowerDatumFullResult"/>

	<sql id="fragment-findall-PowerDatum-PowerDatumMatch">
		FROM
			solarnet.sn_power_datum pdatum
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="filter.sourceIds">
				pdatum.source_id IN
				<iterate open="(" close=")" conjunction="," property="filter.sourceIds">#filter.sourceIds[]#</iterate>					
			</isNotEmpty>
			<isNotNull prepend="AND" property="filter.nodeIds">
				pdatum.node_id IN
				<iterate open="(" close=")" conjunction="," property="filter.nodeIds">#filter.nodeIds[]#</iterate>					
			</isNotNull>
			<isNotNull prepend="AND" property="filter.startDate">
				pdatum.created &gt;= #filter.startDate#
			</isNotNull>
			<isNotNull prepend="AND" property="filter.endDate">
				pdatum.created &lt; #filter.endDate#
			</isNotNull>
		</dynamic>
	</sql>

	<select id="findall-PowerDatum-PowerDatumMatch" resultMap="PowerDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			<include refid="fragment-PowerDatum-full-result"/>
		<include refid="fragment-findall-PowerDatum-PowerDatumMatch"/>
		ORDER BY
		<isNotEmpty property="SortDescriptors">
			<iterate property="SortDescriptors" conjunction="," close=",">
				<isEqual property="SortDescriptors[].sortKey" compareValue="created">pdatum.created</isEqual>
				<isEqual property="SortDescriptors[].sortKey" compareValue="node">pdatum.node_id</isEqual>
				<isEqual property="SortDescriptors[].sortKey" compareValue="source">pdatum.source_id</isEqual>
				<isEqual property="SortDescriptors[].descending" compareValue="true">DESC</isEqual>
			</iterate>
		</isNotEmpty>
		pdatum.id
	</select>

	<select id="findall-PowerDatum-PowerDatumMatch-count" resultClass="long">
		SELECT count(pdatum.id)
		<include refid="fragment-findall-PowerDatum-PowerDatumMatch"/>
	</select>

	<!-- 
		AggregationFilterableDao support
	-->
	
	<resultMap id="ReportingPowerDatumMatchResult" class="ReportingPowerDatum">
		<result column="r_power_datum_created_date" property="localDateTime"/>
		<result column="r_power_datum_node_id" property="nodeId"/>
		<result column="r_power_datum_source_id" property="sourceId"/>
		<result column="r_power_datum_watts" property="watts"/>
		<result column="r_power_datum_watt_hours" property="wattHours"/>
		<result column="r_power_datum_cost_amt" property="cost"/>
		<result column="r_power_datum_cost_currency" property="currency"/>
	</resultMap>

	<!--  Note: r_power_datum_created_date is not provided by this base fragment, because that column name varies -->
	<sql id="fragment-PowerDatum-aggregation-result">
		rpdatum.node_id AS r_power_datum_node_id,
		rpdatum.source_id AS r_power_datum_source_id,
		rpdatum.watts AS r_power_datum_watts,
		rpdatum.watt_hours AS r_power_datum_watt_hours,
		rpdatum.cost_amt AS r_power_datum_cost_amt,
		rpdatum.cost_currency AS r_power_datum_cost_currency
	</sql>

	<!--  Note: r_power_datum_created_date is not provided by this base fragment, because that column name varies -->
	<sql id="fragment-PowerDatum-average-result">
		rpdatum.node_id AS r_power_datum_node_id,
		rpdatum.source_id AS r_power_datum_source_id,
		AVG(rpdatum.watts) AS r_power_datum_watts,
		AVG(rpdatum.watt_hours) AS r_power_datum_watt_hours,
		AVG(rpdatum.cost_amt) AS r_power_datum_cost_amt,
		MIN(rpdatum.cost_currency) AS r_power_datum_cost_currency
	</sql>

	<!--  Note: r_power_datum_created_date is not provided by this base fragment, because that column name varies -->
	<sql id="fragment-PowerDatum-sum-result">
		rpdatum.node_id AS r_power_datum_node_id,
		rpdatum.source_id AS r_power_datum_source_id,
		AVG(rpdatum.watts) AS r_power_datum_watts,
		SUM(rpdatum.watt_hours) AS r_power_datum_watt_hours,
		SUM(rpdatum.cost_amt) AS r_power_datum_cost_amt,
		MIN(rpdatum.cost_currency) AS r_power_datum_cost_currency
	</sql>

	<sql id="fragment-findall-PowerDatum-ReportingPowerDatum-Hour">
		FROM
			solarrep.rep_power_datum_hourly rpdatum
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="filter.sourceIds">
				rpdatum.source_id IN
				<iterate open="(" close=")" conjunction="," property="filter.sourceIds">#filter.sourceIds[]#</iterate>					
			</isNotEmpty>
			<isNotNull prepend="AND" property="filter.nodeIds">
				rpdatum.node_id IN
				<iterate open="(" close=")" conjunction="," property="filter.nodeIds">#filter.nodeIds[]#</iterate>					
			</isNotNull>
			<isNotNull prepend="AND" property="filter.startDate">
				<isNotNull property="filter.nodeId">
					rpdatum.created_hour &gt;= solarnet.get_node_local_timestamp(#filter.startDate#, #filter.nodeId#)
				</isNotNull>
				<isNull property="filter.nodeId">
					rpdatum.created_hour &gt;= #filter.startDate#
				</isNull>
			</isNotNull>
			<isNotNull prepend="AND" property="filter.endDate">
				<isNotNull property="filter.nodeId">
					rpdatum.created_hour &lt;= solarnet.get_node_local_timestamp(#filter.endDate#, #filter.nodeId#)
				</isNotNull>
				<isNull property="filter.nodeId">
					rpdatum.created_hour &lt; #filter.endDate#
				</isNull>
			</isNotNull>
		</dynamic>
	</sql>

	<select id="findall-PowerDatum-ReportingPowerDatum-Hour-count" resultClass="long">
		SELECT count(rpdatum.created_hour)
		<include refid="fragment-findall-PowerDatum-ReportingPowerDatum-Hour"/>
	</select>
	
	<select id="findall-PowerDatum-ReportingPowerDatum-Hour" resultMap="ReportingPowerDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			rpdatum.created_hour AS r_power_datum_created_date,
			<include refid="fragment-PowerDatum-aggregation-result"/>
		<include refid="fragment-findall-PowerDatum-ReportingPowerDatum-Hour"/>
		ORDER BY
		<isNotEmpty property="SortDescriptors">
			<iterate property="SortDescriptors" conjunction=",">
				<isEqual property="SortDescriptors[].sortKey" compareValue="created">rpdatum.created_hour</isEqual>
				<isEqual property="SortDescriptors[].sortKey" compareValue="node">rpdatum.node_id</isEqual>
				<isEqual property="SortDescriptors[].sortKey" compareValue="source">rpdatum.source_id</isEqual>
				<isEqual property="SortDescriptors[].descending" compareValue="true">DESC</isEqual>
			</iterate>
		</isNotEmpty>
		<isEmpty property="SortDescriptors">
			rpdatum.created_hour, rpdatum.node_id, rpdatum.source_id
		</isEmpty>
	</select>

	<!-- HourOfDay aggregation: grouped by hour. 
		The "creation date" is returned as an offset from solarnet.get_season_monday_start().  -->
		
	<sql id="fragment-findall-PowerDatum-ReportingPowerDatum-HourOfDay">
		<include refid="fragment-findall-PowerDatum-ReportingPowerDatum-Hour"/>
		GROUP BY EXTRACT(hour FROM rpdatum.created_hour), rpdatum.node_id, rpdatum.source_id
	</sql>

	<select id="findall-PowerDatum-ReportingPowerDatum-HourOfDay-count" resultClass="long">
		SELECT count(sub.h) FROM (SELECT EXTRACT(hour FROM rpdatum.created_hour) AS h
		<include refid="fragment-findall-PowerDatum-ReportingPowerDatum-HourOfDay"/>
		) AS sub
	</select>
	
	<select id="findall-PowerDatum-ReportingPowerDatum-HourOfDay" resultMap="ReportingPowerDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			CAST('2001-01-01 ' || to_char(EXTRACT(hour FROM rpdatum.created_hour), '00') || ':00' AS TIMESTAMP) AS r_power_datum_created_date,
			<include refid="fragment-PowerDatum-average-result"/>
		<include refid="fragment-findall-PowerDatum-ReportingPowerDatum-HourOfDay"/>
		ORDER BY EXTRACT(hour FROM rpdatum.created_hour), rpdatum.node_id, rpdatum.source_id
	</select>

	<!-- SeasonalHourOfDay aggregation: grouped by "season" and by hour. 
		The "creation date" is returned as an offset from midnight 2001-01-01.  -->
		
	<sql id="fragment-findall-PowerDatum-ReportingPowerDatum-SeasonalHourOfDay">
		<include refid="fragment-findall-PowerDatum-ReportingPowerDatum-Hour"/>
		GROUP BY 
			solarnet.get_season_monday_start(CAST(rpdatum.created_hour AS DATE)), 
			EXTRACT(hour FROM rpdatum.created_hour), 
			rpdatum.node_id, 
			rpdatum.source_id
	</sql>

	<select id="findall-PowerDatum-ReportingPowerDatum-SeasonalHourOfDay-count" resultClass="long">
		SELECT count(sub.h) FROM (SELECT EXTRACT(hour FROM rpdatum.created_hour) AS h
		<include refid="fragment-findall-PowerDatum-ReportingPowerDatum-SeasonalHourOfDay"/>
		) AS sub
	</select>
	
	<select id="findall-PowerDatum-ReportingPowerDatum-SeasonalHourOfDay" resultMap="ReportingPowerDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			solarnet.get_season_monday_start(CAST(rpdatum.created_hour AS DATE)) + CAST(EXTRACT(hour FROM rpdatum.created_hour) || ' hour' AS INTERVAL) AS r_power_datum_created_date,
			<include refid="fragment-PowerDatum-average-result"/>
		<include refid="fragment-findall-PowerDatum-ReportingPowerDatum-SeasonalHourOfDay"/>
		ORDER BY 
			solarnet.get_season_monday_start(CAST(rpdatum.created_hour AS DATE)),
			EXTRACT(hour FROM rpdatum.created_hour), 
			rpdatum.node_id, 
			rpdatum.source_id
	</select>

	<sql id="fragment-findall-PowerDatum-ReportingPowerDatum-Day">
		FROM
			solarrep.rep_power_datum_daily rpdatum
		<dynamic prepend="WHERE">
			<isNotEmpty prepend="AND" property="filter.sourceIds">
				rpdatum.source_id IN
				<iterate open="(" close=")" conjunction="," property="filter.sourceIds">#filter.sourceIds[]#</iterate>					
			</isNotEmpty>
			<isNotNull prepend="AND" property="filter.nodeIds">
				rpdatum.node_id IN
				<iterate open="(" close=")" conjunction="," property="filter.nodeIds">#filter.nodeIds[]#</iterate>					
			</isNotNull>
			<isNotNull prepend="AND" property="filter.startDate">
				<isNotNull property="filter.nodeId">
					rpdatum.created_day &gt;= solarnet.get_node_local_timestamp(#filter.startDate#, #filter.nodeId#)
				</isNotNull>
				<isNull property="filter.nodeId">
					rpdatum.created_day &gt;= #filter.startDate#
				</isNull>
			</isNotNull>
			<isNotNull prepend="AND" property="filter.endDate">
				<isNotNull property="filter.nodeId">
					rpdatum.created_day &lt;= solarnet.get_node_local_timestamp(#filter.endDate#, #filter.nodeId#)
				</isNotNull>
				<isNull property="filter.nodeId">
					rpdatum.created_day &lt; #filter.endDate#
				</isNull>
			</isNotNull>
		</dynamic>
	</sql>

	<select id="findall-PowerDatum-ReportingPowerDatum-Day-count" resultClass="long">
		SELECT count(rpdatum.created_day)
		<include refid="fragment-findall-PowerDatum-ReportingPowerDatum-Day"/>
	</select>
	
	<select id="findall-PowerDatum-ReportingPowerDatum-Day" resultMap="ReportingPowerDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			rpdatum.created_day AS r_power_datum_created_date,
			<include refid="fragment-PowerDatum-aggregation-result"/>
		<include refid="fragment-findall-PowerDatum-ReportingPowerDatum-Day"/>
		ORDER BY
		<isNotEmpty property="SortDescriptors">
			<iterate property="SortDescriptors" conjunction=",">
				<isEqual property="SortDescriptors[].sortKey" compareValue="created">rpdatum.created_day</isEqual>
				<isEqual property="SortDescriptors[].sortKey" compareValue="node">rpdatum.node_id</isEqual>
				<isEqual property="SortDescriptors[].sortKey" compareValue="source">rpdatum.source_id</isEqual>
				<isEqual property="SortDescriptors[].descending" compareValue="true">DESC</isEqual>
			</iterate>
		</isNotEmpty>
		<isEmpty property="SortDescriptors">
			rpdatum.created_day, rpdatum.node_id, rpdatum.source_id
		</isEmpty>
	</select>

	<!-- Month aggregation -->
		
	<sql id="fragment-findall-PowerDatum-ReportingPowerDatum-Month">
		<include refid="fragment-findall-PowerDatum-ReportingPowerDatum-Day"/>
		GROUP BY 
			date_trunc('month', rpdatum.created_day), 
			rpdatum.node_id, 
			rpdatum.source_id
	</sql>

	<select id="findall-PowerDatum-ReportingPowerDatum-Month-count" resultClass="long">
		SELECT count(sub.d) FROM (SELECT date_trunc('month', rpdatum.created_day) AS d
		<include refid="fragment-findall-PowerDatum-ReportingPowerDatum-Month"/>
		) AS sub
	</select>
	
	<select id="findall-PowerDatum-ReportingPowerDatum-Month" resultMap="ReportingPowerDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			date_trunc('month', rpdatum.created_day) AS r_power_datum_created_date,
			<include refid="fragment-PowerDatum-sum-result"/>
		<include refid="fragment-findall-PowerDatum-ReportingPowerDatum-Month"/>
		ORDER BY 
			date_trunc('month', rpdatum.created_day), 
			rpdatum.node_id, 
			rpdatum.source_id
	</select>

	<!-- DayOfWeek aggregation: grouped by ISODOW so Monday == 1, Sunday == 7. 
		The "creation date" is returned as an offset from 2001-01-01 (a Monday).  -->
		
	<sql id="fragment-findall-PowerDatum-ReportingPowerDatum-DayOfWeek">
		<include refid="fragment-findall-PowerDatum-ReportingPowerDatum-Day"/>
		GROUP BY EXTRACT(isodow FROM rpdatum.created_day), rpdatum.node_id, rpdatum.source_id
	</sql>

	<select id="findall-PowerDatum-ReportingPowerDatum-DayOfWeek-count" resultClass="long">
		SELECT count(sub.d) FROM (SELECT EXTRACT(isodow FROM rpdatum.created_day) AS d
		<include refid="fragment-findall-PowerDatum-ReportingPowerDatum-DayOfWeek"/>
		) AS sub
	</select>
	
	<select id="findall-PowerDatum-ReportingPowerDatum-DayOfWeek" resultMap="ReportingPowerDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			DATE '2001-01-01' + CAST((EXTRACT(isodow FROM rpdatum.created_day) - 1) || ' day' AS INTERVAL) AS r_power_datum_created_date,
			<include refid="fragment-PowerDatum-average-result"/>
		<include refid="fragment-findall-PowerDatum-ReportingPowerDatum-DayOfWeek"/>
		ORDER BY EXTRACT(isodow FROM rpdatum.created_day), rpdatum.node_id, rpdatum.source_id
	</select>

	<!-- SeasonalDayOfWeek aggregation: grouped by "season" and ISODOW so Monday == 1, Sunday == 7. 
		The "creation date" is returned as an offset from solarnet.get_season_monday_start().  -->
		
	<sql id="fragment-findall-PowerDatum-ReportingPowerDatum-SeasonalDayOfWeek">
		<include refid="fragment-findall-PowerDatum-ReportingPowerDatum-Day"/>
		GROUP BY 
			solarnet.get_season_monday_start(rpdatum.created_day), 
			EXTRACT(isodow FROM rpdatum.created_day), 
			rpdatum.node_id, 
			rpdatum.source_id
	</sql>

	<select id="findall-PowerDatum-ReportingPowerDatum-SeasonalDayOfWeek-count" resultClass="long">
		SELECT count(sub.d) FROM (SELECT EXTRACT(isodow FROM rpdatum.created_day) AS d
		<include refid="fragment-findall-PowerDatum-ReportingPowerDatum-SeasonalDayOfWeek"/>
		) AS sub
	</select>
	
	<select id="findall-PowerDatum-ReportingPowerDatum-SeasonalDayOfWeek" resultMap="ReportingPowerDatumMatchResult" fetchSize="250" resultSetType="FORWARD_ONLY">
		SELECT
			solarnet.get_season_monday_start(rpdatum.created_day) + CAST((EXTRACT(isodow FROM rpdatum.created_day) - 1) || ' day' AS INTERVAL) AS r_power_datum_created_date,
			<include refid="fragment-PowerDatum-average-result"/>
		<include refid="fragment-findall-PowerDatum-ReportingPowerDatum-SeasonalDayOfWeek"/>
		ORDER BY 
			solarnet.get_season_monday_start(rpdatum.created_day), 
			EXTRACT(isodow FROM rpdatum.created_day), 
			rpdatum.node_id, 
			rpdatum.source_id
	</select>

</sqlMap>
