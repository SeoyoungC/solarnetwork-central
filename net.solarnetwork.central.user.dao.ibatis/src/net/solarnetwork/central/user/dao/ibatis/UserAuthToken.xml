<?xml version="1.0" encoding="UTF-8" ?> 
<!DOCTYPE sqlMap 
    PUBLIC "-//ibatis.apache.org//DTD SQL Map 2.0//EN" 
    "http://ibatis.apache.org/dtd/sql-map-2.dtd"> 
<sqlMap namespace="UserAuthToken">

	<insert id="insert-UserAuthToken" parameterClass="UserAuthToken">
		INSERT INTO solaruser.user_auth_token 
			(auth_token
			<isNotNull prepend="," property="created">created</isNotNull>
			, user_id, auth_secret, status, token_type
			)
		VALUES
			(#id#
			<isNotNull prepend="," property="created">#created#</isNotNull>
			, #userId#, #authSecret#
			, CAST(#status# AS solaruser.user_auth_token_status)
			, CAST(#type# AS solaruser.user_auth_token_type)
			)
	</insert>

	<!-- Notice we include the user_id in the update clause, because application
	     logic attempts to update first, then insert, and we don't want two 
	     random auth_token values that collide from two different users to 
	     write over each other! -->
	<update id="update-UserAuthToken" parameterClass="UserAuthToken">
		UPDATE solaruser.user_auth_token SET
			status = CAST(#status# AS solaruser.user_auth_token_status)
		WHERE
			auth_token = #id#
			AND user_id = #userId#
	</update>

	<update id="delete-UserAuthToken" parameterClass="string">
		DELETE FROM solaruser.user_auth_token
		WHERE
			auth_token = #id#
	</update>
	
	<insert id="insert-UserAuthToken-node" parameterClass="map">
		INSERT INTO solaruser.user_auth_token_node
			(auth_token, node_id)
		VALUES
			(#id#, #nodeId#)
	</insert>

	<update id="delete-UserAuthToken-nodes" parameterClass="string">
		DELETE FROM solaruser.user_auth_token_node
		WHERE
			auth_token = #id#
	</update>

	<sql id="fragment-UserAuthToken-full-result">
		uat.auth_token AS uat_auth_token,
		uat.created AS uat_created,
		uat.user_id AS uat_user_id,
		uat.auth_secret AS uat_auth_secret,
		uat.status AS uat_status,
		uat.token_type AS uat_token_type,
		uatn.node_id AS uatn_node_id
	</sql>

	<resultMap id="UserAuthTokenFullResult" class="UserAuthToken" groupBy="id">
		<result column="uat_auth_token" property="id"/>
		<result column="uat_created" property="created"/>
		<result column="uat_user_id" property="userId"/>
		<result column="uat_auth_secret" property="authSecret"/>
		<result column="uat_status" property="status"/>
		<result column="uat_token_type" property="type"/>
		<result resultMap="UserAuthToken.UserAuthTokenNodeResult" property="nodeIds"/>
	</resultMap>
	
	<resultMap id="UserAuthTokenNodeResult" class="long">
		<result column="uatn_node_id" property="nodeIds"/> 
	</resultMap>

	<select id="get-UserAuthToken-for-id" resultMap="UserAuthTokenFullResult">
		SELECT
			<include refid="fragment-UserAuthToken-full-result"/>
		FROM
			solaruser.user_auth_token uat
		LEFT OUTER JOIN
			solaruser.user_auth_token_node uatn ON uatn.auth_token = uat.auth_token
		WHERE
			uat.auth_token = #id#
	</select>
	
	<select id="find-UserAuthToken-for-UserID" resultMap="UserAuthTokenFullResult" parameterClass="long">
		SELECT 
			<include refid="fragment-UserAuthToken-full-result"/>
		FROM
			solaruser.user_auth_token uat
		LEFT OUTER JOIN
			solaruser.user_auth_token_node uatn ON uatn.auth_token = uat.auth_token
		WHERE
			uat.user_id = #id#
		ORDER BY
			uat.created, uat.auth_token
	</select>

</sqlMap>
