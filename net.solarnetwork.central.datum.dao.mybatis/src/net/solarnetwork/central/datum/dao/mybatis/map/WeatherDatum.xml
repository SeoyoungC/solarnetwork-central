<?xml version="1.0" encoding="UTF-8"?><!--Converted at: Thu Nov 13 07:30:22 NZDT 2014-->
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="net.solarnetwork.central.datum.dao.mybatis.WeatherDatum">

	<insert id="insert-WeatherDatum" parameterType="weatherDatum">
		<selectKey keyProperty="id" resultType="long" order="BEFORE"> 
              SELECT nextval('solarnet.weather_seq') AS id 
		</selectKey>
		INSERT INTO solarnet.sn_weather_datum 
			(id
			<if test="created != null">,created</if>
			, loc_id, info_date, temperature, sky,
			humidity, bar, bar_dir, visibility, uv_index, dew)
		VALUES
			(#{id}
			<if test="created != null">,#{created}</if>
			, #{locationId}, #{infoDate}, #{temperatureCelsius},
			#{skyConditions}, #{humidity}, #{barometricPressure}, 
			#{barometerDelta}, #{visibility}, #{uvIndex}, #{dewPoint})
	</insert>

	<update id="update-WeatherDatum" parameterType="weatherDatum">
		UPDATE solarnet.sn_weather_datum SET
			created = #{created},
			loc_id = #{locationId}, 
			info_date = #{infoDate},
			temperature = #{temperatureCelsius},
			sky = #{skyConditions},
			humidity = #{humidity},
			bar = #{barometricPressure},
			bar_dir = #{barometerDelta},
			visibility = #{visibility},
			uv_index = #{uvIndex},
			dew = #{dewPoint}
		WHERE
			id = #{id}
	</update>

	<sql id="fragment-WeatherDatum-full-result">
		wdatum.id AS sn_weather_datum_id,
		wdatum.created AS sn_weather_datum_created,
		wdatum.loc_id AS sn_weather_datum_loc_id,
		wdatum.info_date AS sn_weather_datum_info_date,
		wdatum.temperature AS sn_weather_datum_temperature,
		wdatum.sky AS sn_weather_datum_sky,
		wdatum.humidity AS sn_weather_datum_humidity,
		wdatum.bar AS sn_weather_datum_bar,
		wdatum.bar_dir AS sn_weather_datum_bar_dir,
		wdatum.visibility AS sn_weather_datum_visibility,
		wdatum.uv_index AS sn_weather_datum_uv_index,
		wdatum.dew AS sn_weather_datum_dew
	</sql>
	
	<resultMap id="WeatherDatumFullResult" type="WeatherDatum">
		<result property="id" column="sn_weather_datum_id"/>
		<result property="created" column="sn_weather_datum_created"/>
		<result property="locationId" column="sn_weather_datum_loc_id"/>
		<result property="infoDate" column="sn_weather_datum_info_date"/>
		<result property="temperatureCelsius" column="sn_weather_datum_temperature"/>
		<result property="skyConditions" column="sn_weather_datum_sky"/>
		<result property="humidity" column="sn_weather_datum_humidity"/>
		<result property="barometricPressure" column="sn_weather_datum_bar"/>
		<result property="barometerDelta" column="sn_weather_datum_bar_dir"/>
		<result property="visibility" column="sn_weather_datum_visibility"/>
		<result property="uvIndex" column="sn_weather_datum_uv_index"/>
		<result property="dewPoint" column="sn_weather_datum_dew"/>
	</resultMap>
	
	<resultMap id="WeatherDatumMatchResult" type="WeatherDatumMatch" extends="net.solarnetwork.central.datum.dao.mybatis.WeatherDatum.WeatherDatumFullResult"/>
	
	<select id="get-WeatherDatum-for-id" parameterType="long" resultMap="WeatherDatumFullResult">
		SELECT
			<include refid="fragment-WeatherDatum-full-result"/>
		FROM
			solarnet.sn_weather_datum wdatum
		WHERE
			wdatum.id = #{id}
	</select>
	
	<select id="find-WeatherDatum-for-date" resultMap="WeatherDatumFullResult">
		SELECT
			<include refid="fragment-WeatherDatum-full-result"/>
		FROM
			solarnet.sn_weather_datum wdatum
		WHERE
			wdatum.loc_id = #{id}
			AND wdatum.info_date = #{date}
	</select>
	
	<resultMap id="WeatherDatumAggResult" type="ReportingWeatherDatum">
		<result property="localDateTime" column="created"/>
		<result property="locationId" column="loc_id"/>
		<result property="infoDate" column="info_date"/>
		<result property="temperatureCelsius" column="temperature"/>
		<result property="skyConditions" column="sky"/>
		<result property="humidity" column="humidity"/>
		<result property="barometricPressure" column="bar"/>
		<result property="barometerDelta" column="bar_dir"/>
		<result property="visibility" column="visibility"/>
		<result property="uvIndex" column="uv_index"/>
		<result property="dewPoint" column="dew"/>
	</resultMap>
	
	<select id="find-WeatherDatum-for-most-recent" resultMap="WeatherDatumAggResult">
		
		SELECT
			w.info_date at time zone l.time_zone as created,
			w.loc_id,
			w.info_date,
			w.temperature,
			w.sky,
			w.humidity,
			w.bar,
			w.bar_dir,
			w.visibility,
			w.uv_index,
			w.dew
		FROM
			solarnet.sn_weather_datum w
		INNER JOIN solarnet.sn_node n ON n.wloc_id = w.loc_id
		INNER JOIN solarnet.sn_loc l ON l.id = n.loc_id
		WHERE
			n.node_id = #{node}
			AND w.info_date &lt;= #{upToDate}
		ORDER BY
			w.info_date DESC
		
	</select>
	
	<sql id="fragment-findall-WeatherDatum-WeatherDatumMatch">
		FROM
			solarnet.sn_weather_datum wdatum
		<if test="filter != null">
			<if test="filter.hasLocationCriteria">
				INNER JOIN solarnet.sn_loc l ON l.id = wdatum.loc_id
			</if>
			<where>
				<if test="filter.locationId != null">
					AND wdatum.loc_id = #{filter.locationId}
				</if>
				<if test="filter.startDate != null">
					AND wdatum.info_date &gt;= #{filter.startDate,javaType=org.joda.time.DateTime,jdbcType=TIMESTAMP}
				</if>
				<if test="filter.endDate != null">
					AND wdatum.info_date &lt; #{filter.endDate,javaType=org.joda.time.DateTime,jdbcType=TIMESTAMP}
				</if>
				<if test="filter.hasLocationCriteria">
					<if test="filter.location.country != null">
						AND l.country = #{filter.location.country}
					</if>
					<if test="filter.location.region != null">
						AND l.region = #{filter.location.region}
					</if>
					<if test="filter.location.stateOrProvince != null">
						AND l.state_prov = #{filter.location.stateOrProvince}
					</if>
					<if test="filter.location.postalCode != null">
						AND l.postal_code = #{filter.location.postalCode}
					</if>
				</if>
			</where>
		</if>
	</sql>

	<select id="findall-WeatherDatum-WeatherDatumMatch" resultMap="WeatherDatumMatchResult" fetchSize="250">
		SELECT
			<include refid="fragment-WeatherDatum-full-result"/>
		<include refid="fragment-findall-WeatherDatum-WeatherDatumMatch"/>
		ORDER BY
		<choose>
			<when test="SortDescriptors != null and SortDescriptors.size &gt; 0">
			 <foreach collection="SortDescriptors" item="item" separator="," close=",">
					<if test=" item.sortKey == &quot;locationId&quot;">wdatum.loc_id</if>
					<if test=" item.sortKey == &quot;created&quot;">wdatum.info_date</if>
					<if test=" item.sortKey == &quot;infoDate&quot;">wdatum.info_date</if>
					<if test="filter != null and filter.hasLocationCriteria">
						<if test=" item.sortKey == &quot;location.country&quot;">l.country</if>
						<if test=" item.sortKey == &quot;location.region&quot;">l.region</if>
						<if test=" item.sortKey == &quot;location.stateOrProvince&quot;">l.state_prov</if>
						<if test=" item.sortKey == &quot;location.postalCode&quot;">l.postal_code</if>
					</if>
					<if test=" item.descending">DESC</if>
				</foreach>
			</when>
			<otherwise>
				wdatum.id
			</otherwise>
		</choose>
	</select>

	<select id="findall-WeatherDatum-WeatherDatumMatch-count" resultType="long">
		SELECT count(wdatum.id)
		<include refid="fragment-findall-WeatherDatum-WeatherDatumMatch"/>
	</select>

</mapper>